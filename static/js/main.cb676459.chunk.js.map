{"version":3,"sources":["components/Pagination.js","components/CountryCard.js","App.js","reportWebVitals.js","index.js"],"names":["LEFT_PAGE","RIGHT_PAGE","range","from","to","step","i","push","Pagination","props","fetchPageNumbers","totalPages","currentPage","state","pageNeighbours","totalNumbers","startPage","Math","max","endPage","min","pages","hasLeftSpill","hasRightSpill","spillOffset","length","extraPages","gotoPage","page","onPageChanged","f","paginationData","pageLimit","totalRecords","setState","handleClick","evt","preventDefault","handleMoveLeft","handleMoveRight","ceil","this","aria-label","className","map","index","href","onClick","aria-hidden","Component","CountryCard","country","cca2","code2","region","name","format","pngSize","basePath","common","App","allCountries","currentCountries","data","offset","slice","Countries","findAll","totalCountries","headerClass","join","trim","cca3","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb676459.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nconst LEFT_PAGE = 'LEFT';\nconst RIGHT_PAGE = 'RIGHT';\n\n/**\n * Helper method for creating a range of numbers\n * range(1, 5) => [1, 2, 3, 4, 5]\n */\nconst range = (from, to, step = 1) => {\n  let i = from;\n  const range = [];\n\n  while (i <= to) {\n    range.push(i);\n    i += step;\n  }\n\n  return range;\n}\n\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n    const { totalRecords = null, pageLimit = 30, pageNeighbours = 0 } = props;\n\n    this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\n    this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0;\n\n    // pageNeighbours can be: 0, 1 or 2\n    this.pageNeighbours = typeof pageNeighbours === 'number'\n      ? Math.max(0, Math.min(pageNeighbours, 2))\n      : 0;\n\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\n\n    this.state = { currentPage: 1 };\n  }\n\n  // ...\n\n  /**\n   * Let's say we have 10 pages and we set pageNeighbours to 2\n   * Given that the current page is 6\n   * The pagination control will look like the following:\n   *\n   * (1) < {4 5} [6] {7 8} > (10)\n   *\n   * (x) => terminal pages: first and last page(always visible)\n   * [x] => represents current page\n   * {...x} => represents page neighbours\n   */\n  fetchPageNumbers = () => {\n    const totalPages = this.totalPages;\n    const currentPage = this.state.currentPage;\n    const pageNeighbours = this.pageNeighbours;\n\n    /**\n     * totalNumbers: the total page numbers to show on the control\n     * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\n     */\n    const totalNumbers = (this.pageNeighbours * 2) + 3;\n    const totalBlocks = totalNumbers + 2;\n\n    if (totalPages > totalBlocks) {\n      const startPage = Math.max(2, currentPage - pageNeighbours);\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\n      let pages = range(startPage, endPage);\n\n      /**\n       * hasLeftSpill: has hidden pages to the left\n       * hasRightSpill: has hidden pages to the right\n       * spillOffset: number of hidden pages either to the left or to the right\n       */\n      const hasLeftSpill = startPage > 2;\n      const hasRightSpill = (totalPages - endPage) > 1;\n      const spillOffset = totalNumbers - (pages.length + 1);\n\n      switch (true) {\n        // handle: (1) < {5 6} [7] {8 9} (10)\n        case (hasLeftSpill && !hasRightSpill): {\n          const extraPages = range(startPage - spillOffset, startPage - 1);\n          pages = [LEFT_PAGE, ...extraPages, ...pages];\n          break;\n        }\n\n        // handle: (1) {2 3} [4] {5 6} > (10)\n        case (!hasLeftSpill && hasRightSpill): {\n          const extraPages = range(endPage + 1, endPage + spillOffset);\n          pages = [...pages, ...extraPages, RIGHT_PAGE];\n          break;\n        }\n\n        // handle: (1) < {4 5} [6] {7 8} > (10)\n        case (hasLeftSpill && hasRightSpill):\n        default: {\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n          break;\n        }\n      }\n\n      return [1, ...pages, totalPages];\n    }\n\n    return range(1, totalPages);\n  }\n\n  render() {\n    if (!this.totalRecords || this.totalPages === 1) return null;\n\n    const { currentPage } = this.state;\n    const pages = this.fetchPageNumbers();\n\n    return (\n      <Fragment>\n        <nav aria-label=\"Countries Pagination\">\n          <ul className=\"pagination\">\n            { pages.map((page, index) => {\n\n              if (page === LEFT_PAGE) return (\n                <li key={index} className=\"page-item\">\n                  <a className=\"page-link\" href=\"#\" aria-label=\"Previous\" onClick={this.handleMoveLeft}>\n                    <span aria-hidden=\"true\">&laquo;</span>\n                    <span className=\"sr-only\">Previous</span>\n                  </a>\n                </li>\n              );\n\n              if (page === RIGHT_PAGE) return (\n                <li key={index} className=\"page-item\">\n                  <a className=\"page-link\" href=\"#\" aria-label=\"Next\" onClick={this.handleMoveRight}>\n                    <span aria-hidden=\"true\">&raquo;</span>\n                    <span className=\"sr-only\">Next</span>\n                  </a>\n                </li>\n              );\n\n              return (\n                <li key={index} className={`page-item${ currentPage === page ? ' active' : ''}`}>\n                  <a className=\"page-link\" href=\"#\" onClick={ this.handleClick(page) }>{ page }</a>\n                </li>\n              );\n\n            }) }\n\n          </ul>\n        </nav>\n      </Fragment>\n    );\n  }\n\n  componentDidMount() {\n    this.gotoPage(1);\n  }\n\n  gotoPage = page => {\n    const { onPageChanged = f => f } = this.props;\n    const currentPage = Math.max(0, Math.min(page, this.totalPages));\n    const paginationData = {\n      currentPage,\n      totalPages: this.totalPages,\n      pageLimit: this.pageLimit,\n      totalRecords: this.totalRecords\n    };\n\n    this.setState({ currentPage }, () => onPageChanged(paginationData));\n  }\n\n  handleClick = page => evt => {\n    evt.preventDefault();\n    this.gotoPage(page);\n  }\n\n  handleMoveLeft = evt => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage - (this.pageNeighbours * 2) - 1);\n  }\n\n  handleMoveRight = evt => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage + (this.pageNeighbours * 2) + 1);\n  }\n}\n\nPagination.propTypes = {\n  totalRecords: PropTypes.number.isRequired,\n  pageLimit: PropTypes.number,\n  pageNeighbours: PropTypes.number,\n  onPageChanged: PropTypes.func\n};\n\nexport default Pagination;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Flag from 'react-flags';\n\nconst CountryCard = props => {\n  const {\n    cca2: code2 = '', region = null, name = {}\n  } = props.country || {};\n\n  return (\n    <div className=\"col-sm-6 col-md-4 country-card\">\n      <div className=\"country-card-container border-gray rounded border mx-2 my-3 d-flex flex-row align-items-center p-0 bg-light\">\n        <div className=\"h-100 position-relative border-gray border-right px-2 bg-white rounded-left\">\n          <Flag country={code2} format=\"png\" pngSize={64} basePath=\"./img/flags\" className=\"d-block h-100\" />\n        </div>\n        <div className=\"px-3\">\n          <span className=\"country-name text-dark d-block font-weight-bold\">{ name.common }</span>\n          <span className=\"country-region text-secondary text-uppercase\">{ region }</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nCountryCard.propTypes = {\n  country: PropTypes.shape({\n    cca2: PropTypes.string.isRequired,\n    region: PropTypes.string.isRequired,\n    name: PropTypes.shape({\n      common: PropTypes.string.isRequired\n    }).isRequired\n  }).isRequired\n};\n\nexport default CountryCard;","import React, { Component } from 'react';\nimport Countries from 'countries-api';\nimport './App.scss';\nimport Pagination from './components/Pagination';\nimport CountryCard from './components/CountryCard';\n\nclass App extends Component {\n  state = { allCountries: [], currentCountries: [], currentPage: null, totalPages: null }\n\n  componentDidMount() {\n    const { data: allCountries = [] } = Countries.findAll();\n    this.setState({ allCountries });\n  }\n\n  onPageChanged = data => {\n    const { allCountries } = this.state;\n    const { currentPage, totalPages, pageLimit } = data;\n    const offset = (currentPage - 1) * pageLimit;\n    const currentCountries = allCountries.slice(offset, offset + pageLimit);\n\n    this.setState({ currentPage, currentCountries, totalPages });\n  }\n\n  render() {\n    const { allCountries, currentCountries, currentPage, totalPages } = this.state;\n    const totalCountries = allCountries.length;\n\n    if (totalCountries === 0) return null;\n\n    const headerClass = ['text-dark py-2 pr-4 m-0', currentPage ? 'border-gray border-right' : ''].join(' ').trim();\n\n    return (\n      <div className=\"container mb-5\">\n        <div className=\"row d-flex flex-row py-5\">\n          <div className=\"w-100 px-4 py-5 d-flex flex-row flex-wrap align-items-center justify-content-between\">\n            <div className=\"d-flex flex-row align-items-center\">\n              <h2 className={headerClass}>\n                <strong className=\"text-secondary\">{totalCountries}</strong> Countries\n              </h2>\n              { currentPage && (\n                <span className=\"current-page d-inline-block h-100 pl-4 text-secondary\">\n                  Page <span className=\"font-weight-bold\">{ currentPage }</span> / <span className=\"font-weight-bold\">{ totalPages }</span>\n                </span>\n              ) }\n            </div>\n            <div className=\"d-flex flex-row py-4 align-items-center\">\n              <Pagination totalRecords={totalCountries} pageLimit={18} pageNeighbours={1} onPageChanged={this.onPageChanged} />\n            </div>\n          </div>\n          { currentCountries.map(country => <CountryCard key={country.cca3} country={country} />) }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}